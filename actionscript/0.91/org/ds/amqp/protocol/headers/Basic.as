/**
---------------------------------------------------------------------------

Copyright (c) 2009 Dan Simpson

Auto-Generated @ Tue Jul 28 23:54:30 -0700 2009.  Do not edit this file, extend it you must.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------
**/


/*
Documentation

      The Basic class provides methods that support an industry-standard messaging model.
     
      basic               = C:QOS S:QOS-OK
                          / C:CONSUME S:CONSUME-OK
                          / C:CANCEL S:CANCEL-OK
                          / C:PUBLISH content
                          / S:RETURN content
                          / S:DELIVER content
                          / C:GET ( S:GET-OK content / S:GET-EMPTY )
                          / C:ACK
                          / C:REJECT
                          / C:RECOVER-ASYNC
                          / C:RECOVER S:RECOVER-OK
    
*/
package org.ds.amqp.protocol.headers
{
	import flash.utils.ByteArray;
	import flash.utils.Dictionary;
	import org.ds.amqp.datastructures.*;
	import org.ds.amqp.transport.Buffer;
	import org.ds.amqp.protocol.Header;
	
	public dynamic class Basic extends Header
	{

		//MIME content type
		public var contentType             :String;

		//MIME content encoding
		public var contentEncoding         :String;

		//message header field table
		public var headers                 :FieldTable;

		//non-persistent (1) or persistent (2)
		public var deliveryMode            :uint;

		//message priority, 0 to 9
		public var priority                :uint;

		//application correlation identifier
		public var correlationId           :String;

		//address to reply to
		public var replyTo                 :String;

		//message expiration specification
		public var expiration              :String;

		//application message identifier
		public var messageId               :String;

		//message timestamp
		public var timestamp               :Date;

		//message type name
		public var type                    :String;

		//creating user id
		public var userId                  :String;

		//creating application id
		public var appId                   :String;

		//reserved, must be empty
		public var reserved                :String;


		public function Basic() {
			_classId  = 60;
		}

		public override function writeProperties(buf:Buffer):void {

			buf.writeShortString(this.contentType);
			buf.writeShortString(this.contentEncoding);
			buf.writeTable(this.headers);
			buf.writeOctet(this.deliveryMode);
			buf.writeOctet(this.priority);
			buf.writeShortString(this.correlationId);
			buf.writeShortString(this.replyTo);
			buf.writeShortString(this.expiration);
			buf.writeShortString(this.messageId);
			buf.writeTimestamp(this.timestamp);
			buf.writeShortString(this.type);
			buf.writeShortString(this.userId);
			buf.writeShortString(this.appId);
			buf.writeShortString(this.reserved);
		}

		public override function readProperties(buf:Buffer):void {

			this.contentType      = buf.readShortString();
			this.contentEncoding  = buf.readShortString();
			this.headers          = buf.readTable();
			this.deliveryMode     = buf.readOctet();
			this.priority         = buf.readOctet();
			this.correlationId    = buf.readShortString();
			this.replyTo          = buf.readShortString();
			this.expiration       = buf.readShortString();
			this.messageId        = buf.readShortString();
			this.timestamp        = buf.readTimestamp();
			this.type             = buf.readShortString();
			this.userId           = buf.readShortString();
			this.appId            = buf.readShortString();
			this.reserved         = buf.readShortString();
		}
		
		public override function print():void {
			printObj("BasicHeader", this);
		}
	}
}